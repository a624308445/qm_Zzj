const {
  getPosterDetails
} = require('../../../service/api')
import {
  getJt
} from '../../../utils/getuserInfo.js'
const {
  _formatterTime
} = require('../../../utils/util')
const { showErrorToast } = require('../../../utils/util')
Page({
  data: {
    topImg: '../../static/images/top.png',
    downImg: '../../static/images/top.png',
    posterId: null,
    pageData:[],
    canvasImagePath: '',
  },
  onLoad: function (options) {
    const {
      posterId
    } = options
    console.log(posterId, 'posterId');
    this.setData({
      posterId
    })

  },
  onShow() {
    getJt().then(res => {
      this.getDetails()
    })
  },
  getDetails() {
    getPosterDetails({posterId:this.data.posterId}).then(res => {
      this.selectComponent("#hikminiLoading").show()
      if(res.code === '0' && res.code) {
        this.selectComponent("#hikminiLoading").hide()
        let data = res.data
        console.log(data,'cccc');
        data.createTime = data.createTime ? _formatterTime(data.createTime, '-', 'short') : '';
        let yesterdayAccessPersonCount = res.data.yesterdayAccessPersonCount?res.data.yesterdayAccessPersonCount:0;//访问次数
        let todayAccessCount = res.data.todayAccessCount?res.data.todayAccessCount:0;

        let yesterdayAccessCount = res.data.yesterdayAccessCount?res.data.yesterdayAccessCount:0;//访问人数
        let todayAccessPersonCount = res.data.todayAccessPersonCount?res.data.todayAccessPersonCount:0;
        console.log(yesterdayAccessPersonCount)
        console.log(yesterdayAccessCount)
        let accesOrder = yesterdayAccessPersonCount<todayAccessCount?
        (todayAccessCount-yesterdayAccessPersonCount)/yesterdayAccessPersonCount*100:(yesterdayAccessPersonCount-todayAccessCount)/todayAccessCount*100
        let accesOrderFlag = yesterdayAccessPersonCount<todayAccessCount?true:false

        let personOrder = Math.round(todayAccessPersonCount/yesterdayAccessCount*100)
        let personOrderFlag = todayAccessPersonCount<yesterdayAccessCount?true:false
        
        let obj = {
          accesOrder:accesOrder,//次数率
          accesOrderFlag:accesOrderFlag,//true上涨,false下降
          personOrder:personOrder,//人数率
          personOrderFlag:personOrderFlag//true上涨,false下降
        }
        this.setData({
          pageData:data,
          ...obj
        })
        console.log('次数率'+this.data.accesOrder)
        console.log('人数率'+this.data.personOrder)
      } else {
        this.selectComponent("#hikminiLoading").hide()
        showErrorToast(res.message)
    }
    })
  },

  jumpRecord() {
    console.log(this.data.posterId, 'id');
    wx.navigateTo({
      url: '/packagemyPoster/pages/poster/posterOverview',
    })
  }
})

 downloadFile () {
      let options = {
        fileKey: this.templateUrl,
        fileName: '权限系统用户导入模板.xlsx'
      }
      downloadFile(options).then(res => {
        const r = new FileReader()
        let that = this
        console.log('downloadFile -> res', res)
        r.onload = function () {
        // 有可能下载失败，比如返回{code: -1},但设置了responseType: 'blob'，axios会把res强制转为blob，拿不到res.code
        // 解决：将已转为blob类型的data转回json格式，判断是否下载成功
        // 如果JSON.parse(this.result)不报错，说明this.result是json字符串，则可以推测是下载报错情况下返回的对象，类似于{code: 0}
        // 如果JSON.parse(this.result)报错，说明是下载成功，返回的二进制流，则进入catch进行后续处理
          try {
            const resData = JSON.parse(this.result) // this.result为FileReader获取blob数据转换为json后的数据，即后台返回的原始数据
            console.log('downloadFile -> resData', resData)
            // 如果执行到这里，说明下载报错了，进行后续处理
            that.$message.error(resData.message)
          } catch (err) {
            // 下载正常处理
            that.download(res, '权限系统用户导入模板.xlsx')
          }
        }
        r.readAsText(res) // FileReader的API
      })
    },
    download (res, fileName) {
      // 兼容ie11
      if (window.navigator.msSaveOrOpenBlob) {
        try {
          const blobObject = new Blob([res])
          window.navigator.msSaveOrOpenBlob(blobObject, fileName)
        } catch (e) {
          console.log(e)
        }
        return
      }
      // a标签实现下载
      let blob = new Blob([res])
      console.log('download -> blob', blob)
      let link = document.createElement('a')
      let href = window.URL.createObjectURL(blob) // 创建下载的链接
      link.style.display = 'none'
      link.href = href
      link.download = fileName // 下载后文件名
      document.body.appendChild(link)
      link.click() // 点击下载
      document.body.removeChild(link) // 下载完成移除元素
      window.URL.revokeObjectURL(href) // 释放掉blob对象
    },
    
    export const downloadFile = options => {
  return axios.post('/api/file/downloadByKey', options, {
    responseType: 'blob'
  })
}

